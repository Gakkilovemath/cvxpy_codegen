/*
 *  Copyright 2017 Nicholas Moehle
 *  
 *  This file is part of CVXPY-CODEGEN.
 *  
 *  CVXPY-CODEGEN is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  CVXPY-CODEGEN is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with CVXPY-CODEGEN.  If not, see <http://www.gnu.org/licenses/>.
 */


#include "codegen.h"
#include <stdio.h>


void json_vector_long(long *x, long len){
    long i;
    printf("[");
    if (len > 0){
      for (i=0; i<len-1; i++){
          printf("%ld,", x[i]);
      }
      printf("%ld", x[len-1]);
    }
    printf("]");
}

void json_vector_double(double *x, long len){
    long i;
    printf("[");
    if (len > 0){
      for (i=0; i<len-1; i++){
          printf("%9.9lf,", x[i]);
      }
      printf("%9.9lf", x[len-1]);
    }
    printf("]");
}


void solver_init(Work *work);
void expr_handler_init(Work *work);
void eval_exprs(Params *params, Work *work);
void fill_matrices(Work *work);


int main(){
    
    Params params;
    Work work;

    {% for p in named_params %}
      {%- if p.is_scalar() -%}
    params.{{ p.name }} = {{ p.value }};
      {%- elif p.is_vector() -%}
        {% for i in range(p.shape[0]) %}
    params.{{ p.name }}[{{ i }}] = {{ p.value[i] }};
        {% endfor %}
      {%- else -%}
        {% for i in range(p.shape[0]) %}
          {% for j in range(p.shape[1]) %}
    params.{{ p.name }}[{{ i }}][{{ j }}] = {{ p.value[i,j] }};
          {% endfor %}
        {% endfor %}
      {%- endif -%};
    {% endfor %}


    expr_handler_init(&work);
    solver_init(&work);
    eval_exprs(&params, &work);
    fill_matrices(&work);


    printf("{");

      /* Objective. */
      printf("\"obj_coeff\":");
      json_vector_double(work.obj_vec, {{ x_length }});
      printf(",");
      printf("\"obj_offset\":%9.9lf", work.obj_offset);

      /* Equality constraint. */
      printf(",");
      printf("\"eq_shape0\":%d", {{ eq_coeff.shape[0] }});
      printf(",");
      printf("\"eq_shape1\":%d", {{ eq_coeff.shape[1] }});

      printf(",");
      printf("\"eq_colptr\":");
      json_vector_long(work.eq_coeff.p, {{ eq_coeff.shape[1]+1 }});

      printf(",");
      printf("\"eq_rowidx\":");
      json_vector_long(work.eq_coeff.i, {{ eq_coeff.nnz }});

      printf(",");
      printf("\"eq_nzval\":");
      json_vector_double(work.eq_coeff.x, {{ eq_coeff.nnz }});

      printf(",");
      printf("\"eq_offset\":");
      json_vector_double(work.eq_offset, {{ eq_coeff.shape[0] }});

      /* Inequality constraint. */
      printf(",");
      printf("\"leq_shape0\":%d", {{ leq_coeff.shape[0] }});
      printf(",");
      printf("\"leq_shape1\":%d", {{ leq_coeff.shape[1] }});

      printf(",");
      printf("\"leq_colptr\":");
      json_vector_long(work.leq_coeff.p, {{ leq_coeff.shape[1]+1 }});

      printf(",");
      printf("\"leq_rowidx\":");
      json_vector_long(work.leq_coeff.i, {{ leq_coeff.nnz }});

      printf(",");
      printf("\"leq_nzval\":");
      json_vector_double(work.leq_coeff.x, {{ leq_coeff.nnz }});

      printf(",");
      printf("\"leq_offset\":");
      json_vector_double(work.leq_offset, {{ leq_coeff.shape[0] }});

    printf("}");

    return(0);
}
