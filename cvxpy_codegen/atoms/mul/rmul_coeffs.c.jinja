/*
 *  Copyright 2017 Nicholas Moehle
 *  
 *  This file is part of CVXPY-CODEGEN.
 *  
 *  CVXPY-CODEGEN is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  CVXPY-CODEGEN is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with CVXPY-CODEGEN.  If not, see <http://www.gnu.org/licenses/>.
 */

{% import "utils/utils.c.jinja" as u with context %}


{% macro rmul_coeffs_declare() %}
void rmul_coeffs(CsrMatrix *A, LinopCoeff *B, LinopCoeff *Z,
                long *w, double *x);
{% endmacro %}


{% macro rmul_coeffs_define() %}
void rmul_coeffs(CsrMatrix *A, LinopCoeff *B, LinopCoeff *Z,
                long *w, double *x){

  long i, j, k, iZ, jZ, iB, p, p2, q, q2, r=0, m=Z->m, n=Z->n;
  double Aij;
  for(i=0; i<n; i++)  w[i] = 0;
  Z->p[0] = 0;
  for (jZ=0; jZ<Z->n_var; jZ++){
    for(i=0; i<Z->m_var; i++){
      iZ = jZ * Z->m_var + i;
      Z->p[iZ+1] = Z->p[iZ];
      p2 = A->p[i+1];
      for(p=A->p[i]; p<p2; p++){
        j = A->j[p];
        Aij = A->x[p];
        iB_start = j * B->m_var;
        iB_stop = (j+1) * B->m_var;
        for (iB=iB_start; iB<iB_stop; iB++){
          q2 = B->p[iB+1];
          for(q=B->p[iB]; q<q2; q++){
            k = B->j[q];
            if(w[k] < i+1){
              w[k] = i+1;
              x[k] = Aij * B->x[q];
              Z->j[r++] = k;
              Z->p[iZ+1]++;
            }
            else{
              x[k] += Aij * B->x[q];
            }
          }
        }
      }
      for(p=Z->p[iZ]; p<Z->p[iZ+1]; p++){
        Z->x[p] = x[Z->j[p]];
      }
    }
  }
}
{% endmacro %}


{% macro rmul_coeffs_eval(expr) %}
rmul_coeffs(&work->{{ expr.args[0].storage.name  }},
    &work->{{ expr.args[1].storage.name  }},
    &work->{{ expr.storage.name  }},
    work->work_int, work->work_double);
{% endmacro %}


