/*
 *  Copyright 2017 Nicholas Moehle
 *  
 *  This file is part of CVXPY-CODEGEN.
 *  
 *  CVXPY-CODEGEN is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  CVXPY-CODEGEN is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with CVXPY-CODEGEN.  If not, see <http://www.gnu.org/licenses/>.
 */

{% import "utils/utils.c.jinja" as u with context %}


{% macro hstack_coeffs_declare() %}
void hstack_coeffs(long n_args, LinopCoeff *C, LinopCoeff *Z, long *offsets);
{% endmacro %}


{% macro hstack_coeffs_define() %}
void hstack_coeffs(long n_args, LinopCoeff *C, LinopCoeff *Z, long *offsets){
  long i, k, p, p2, count=0, iZ=0;

  Z->p[iZ++] = 0;
  for (k=0; k<n_args; k++){
    for ( ; iZ<offsets[k]+1; iZ++) Z->p[iZ] = Z->p[iZ-1];
    for (i=0; i<C[k].m; i++){
      p2 = C[k].p[i+1];
      Z->p[iZ] = Z->p[iZ-1] + p2 - C[k].p[i];
      for (p=C[k].p[i]; p<p2; p++){
        Z->j[count]   = C[k].j[p];
        Z->x[count++] = C[k].x[p];
      }
      iZ++;
    }
  }
  for ( ; iZ<=Z->m; iZ++) Z->p[iZ] = Z->p[iZ-1];
}
{% endmacro %}


{% macro hstack_coeffs_eval(expr) %}
{% for i, c in enumerate(expr.args) %}
work->work_coeffs[{{ i }}] = work->{{ c.storage.name }};
work->work_int[{{ i }}] = {{ expr.data[i] }};
{% endfor %}
hstack_coeffs({{ len(expr.args) }}, work->work_coeffs, &work->{{ expr.name }},
              work->work_int);
{% endmacro %}
