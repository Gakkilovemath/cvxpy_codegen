/*
 *  Copyright 2017 Nicholas Moehle
 *  
 *  This file is part of CVXPY-CODEGEN.
 *  
 *  CVXPY-CODEGEN is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  CVXPY-CODEGEN is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with CVXPY-CODEGEN.  If not, see <http://www.gnu.org/licenses/>.
 */

{% import "utils/utils.c.jinja" as u with context %}


{% macro add_coeffs_declare() %}
void add_coeffs(long n_args, LinopCoeff *C, LinopCoeff *Z, long *w, double *x);
{% endmacro %}


{% macro add_coeffs_define() %}
void add_coeffs(long n_args, LinopCoeff *C, LinopCoeff *Z, long *w, double *x){
  long i, j, k, p, p2, q=0, m=C[0].m, n=C[0].n;
  Z->p[0] = 0;
  for(i=0; i<n; i++) w[i] = 0;
  for(i=0; i<m; i++){
    Z->p[i+1] = Z->p[i];
    for(k=0; k<n_args; k++){
      p2 = C[k].p[i+1];
      for(p=C[k].p[i]; p<p2; p++){
        j = C[k].j[p];
        if(w[j] < i+1){
          w[j] = i+1;
          Z->j[q++] = j;
          x[j] = C[k].x[p];
          Z->p[i+1]++;
        }
        else{
          x[j] += C[k].x[p];
        }
      }
      p2 = Z->p[i+1];
      for(p=Z->p[i]; p<p2; p++) Z->x[p] = x[Z->j[p]];
    }
  }
}
{% endmacro %}


{% macro add_coeffs_eval(expr) %}
{% for i, c in enumerate(expr.args) %}
work->work_coeffs[{{ i }}] = work->{{ c.name }};
{% endfor %}
add_coeffs({{ len(expr.args) }}, work->work_coeffs, &work->{{ expr.name }},
work->work_int, work->work_double);
{% endmacro %}
