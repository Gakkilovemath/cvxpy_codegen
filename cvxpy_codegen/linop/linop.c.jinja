{% import "utils/utils.c.jinja" as u with context %}
{% import "atoms/linops.c.jinja" as lo with context %}
{% import "atoms/atoms.c.jinja" as atoms with context %}
#include "codegen.h"
#include <stdio.h> // TODO rm


{% macro linop_handler_workspace() %}
    /* Problem coefficients. */

    /* Storage for the equality constraints. */
    CscMatrix eq_coeff;
    long *eq_colptr; // TODO rm
    long *eq_rowidx; // TODO rm
    double eq_nzval[{{ eq_coeff.nnz }}];
    double eq_offset[{{ eq_dim }}];

    /* Storage for the inequality constraints. */
    CscMatrix leq_coeff;
    long *leq_colptr; // TODO rm
    long *leq_rowidx; // TODO rm
    double leq_nzval[{{ leq_coeff.nnz }}];
    double leq_offset[{{ cone_dim }}];

    /* Storage for the objective vector. */
    CscMatrix obj_coeff;
    double obj_nzval[{{ obj_coeff.nnz }}];
    double obj_vec[{{ x_length }}];
    double obj_offset;

    {% if linop_exprs %}
    /* Storage for intermediate results from expression evaluation. */
    {% for expr in linop_exprs %}
    {% if not expr.inplace or expr.make_copy %}
    CsrMatrix {{ expr.name }};
    long   {{ expr.name }}_rowptr[{{ expr.size[0]+1 }}];
    long   {{ expr.name }}_colidx[{{ expr.sparsity.nnz }}];
    double {{ expr.name }}_nzval[{{ expr.sparsity.nnz }}];

    {% endif %}
    {% endfor %}

    /* Storage for the callback parameters. */
    {% for cbp in callback_params %}
    CscMatrix {{ cbp.cbp_name }};
    long   {{cbp.cbp_name}}_colptr[{{ cbp.size[1]+1 }}];
    long   {{cbp.cbp_name}}_rowidx[{{ cbp.sparsity.nnz }}];
    double {{cbp.cbp_name}}_nzval[{{ cbp.sparsity.nnz }}];
    {% endfor %}
    {% endif %}

    /* Storage for the linear operator coefficients. */
    {% for c in linop_coeffs %}
    {% if not c.inplace or c.make_copy %}
    LinopCoeff {{ c.name }};
    long {{ c.name }}_rowptr[{{ c.size[0]+1 }}];
    long {{ c.name }}_colidx[{{ c.sparsity.nnz }}];
    double {{ c.name }}_nzval[{{ c.sparsity.nnz }}];
    {% endif %}

    {% endfor %}
    /* Storage for coefficients corresponding to variables. */
    {% for v in vars %}
    LinopCoeff {{ v.name }};
    long   {{ v.name }}_rowptr[{{ v.size[0]+1 }}];
    long   {{ v.name }}_colidx[{{ v.sparsity.nnz }}];
    double {{ v.name }}_nzval[{{ v.sparsity.nnz }}];

    {% endfor %}
    /* Storage for constants needed for linop evaluation. */
    {% for c in linop_constants %}
    CsrMatrix {{ c.name }};

    {% endfor %}

    // TODO more storage, for parameters
    // TODO more storage, for linop data
{% endmacro %}



{% if linop_constants %}
/* Stored constant values. */
{% for c in linop_constants %}
long   {{ c.name }}_rowptr{{ u.print_vec(c.rowptr) }};
long   {{ c.name }}_colidx{{ u.print_vec(c.colidx) }};
double {{ c.name }}_nzval{{ u.print_vec(c.nzval) }};

{% endfor %}
{% endif %}




/* Sparsity pattern for the objective and constraint matrices. */
long obj_colptr{{ u.print_vec(obj_coeff.indptr) }};
long obj_rowidx{{ u.print_vec(obj_coeff.indices) }};
long eq_colptr{{ u.print_vec(eq_coeff.indptr) }};
long eq_rowidx{{ u.print_vec(eq_coeff.indices) }};
long leq_colptr{{ u.print_vec(leq_coeff.indptr) }};
long leq_rowidx{{ u.print_vec(leq_coeff.indices) }};



void add_matrix(long hshift, long vshift,
                   CscMatrix *A, LinopCoeff *B);
void reset_colptr(long m, long *Ap);
void init_var_coeff(long m_var, long n_var, LinopCoeff *A);
{% for linop_name in unique_linops %}
  {{- lo.declare(linop_name) }}
{% endfor %}
{% for expr_name in unique_exprs %}
  {{- atoms.declare(expr_name) }}
{% endfor %}
// TODO organize where to put this:
void reshape(long m, long m_new,
             long *Ap, long *Aj, double *Ax,
             long *Zp, long *Zj, double *Zx);
void mat2coeff(CsrMatrix *A, LinopCoeff *C);
{{ u.copy_declare() }} {# TODO add logic to python for including this or not #}
{{ u.copy_linop_declare() }} {# TODO add logic to python for including this or not #}
void cscrow2vec(CscMatrix A, double *vec);
void coeff2vec(LinopCoeff A, double *vec, long offset);
void csr_vectorize(CsrMatrix *A, double *x, long offset);



void linop_init(Work *work){
 
    work->eq_coeff.p = eq_colptr;
    work->eq_coeff.i = eq_rowidx;
    work->eq_coeff.x = work->eq_nzval;
    work->obj_coeff.m = {{ eq_coeff.shape[0] }};
    work->obj_coeff.n = {{ eq_coeff.shape[1] }};
    work->obj_coeff.nnz = {{ eq_coeff.nnz }};

    work->leq_coeff.p = leq_colptr;
    work->leq_coeff.i = leq_rowidx;
    work->leq_coeff.x = work->leq_nzval;
    work->obj_coeff.m = {{ leq_coeff.shape[0] }};
    work->obj_coeff.n = {{ leq_coeff.shape[1] }};
    work->obj_coeff.nnz = {{ leq_coeff.nnz }};

    work->obj_coeff.p = obj_colptr;
    work->obj_coeff.i = obj_rowidx;
    work->obj_coeff.x = work->obj_nzval;
    work->obj_coeff.m = {{ obj_coeff.shape[0] }};
    work->obj_coeff.n = {{ obj_coeff.shape[1] }};
    work->obj_coeff.nnz = {{ obj_coeff.nnz }};

    // TODO rm:
    work->eq_colptr = eq_colptr;
    work->eq_rowidx = eq_rowidx;
    work->leq_colptr = leq_colptr;
    work->leq_rowidx = leq_rowidx;


    {% for e in linop_exprs %}
    {% if not e.inplace or e.make_copy %}
    work->{{ e.name }}.p = work->{{ e.name }}_rowptr;
    work->{{ e.name }}.j = work->{{ e.name }}_colidx;
    work->{{ e.name }}.x = work->{{ e.name }}_nzval;
    work->{{ e.name }}.m = {{ e.size[0] }};
    work->{{ e.name }}.n = {{ e.size[1] }};
    work->{{ e.name }}.nnz = {{ e.sparsity.nnz }};
    {% endif %}

    {% endfor %}
    {% for c in linop_coeffs  %}
    {% if not c.inplace or c.make_copy %}
    work->{{ c.name }}.p = work->{{ c.name }}_rowptr;
    work->{{ c.name }}.j = work->{{ c.name }}_colidx;
    work->{{ c.name }}.x = work->{{ c.name }}_nzval;
    work->{{ c.name }}.m = {{ c.sparsity.shape[0] }};
    work->{{ c.name }}.n = {{ c.sparsity.shape[1] }};
    work->{{ c.name }}.nnz = {{ c.sparsity.nnz }};
    work->{{ c.name }}.m_var = {{ c.size[0] }};
    work->{{ c.name }}.n_var = {{ c.size[1] }};
    {% endif %}

    {% endfor %}
    /* Storage for coefficients corresponding to variables. */
    {% for v in vars %}
    work->{{ v.name }}.p = work->{{ v.name }}_rowptr;
    work->{{ v.name }}.j = work->{{ v.name }}_colidx;
    work->{{ v.name }}.x = work->{{ v.name }}_nzval;
    init_var_coeff({{ v.size[0]}}, {{v.size[1]}}, &work->{{ v.name }});

    {% endfor %}
    /* Storage for linop coefficients representing constants. */
    {% for c in linop_constants %}
    work->{{ c.name }}.p = {{ c.name }}_rowptr;
    work->{{ c.name }}.j = {{ c.name }}_colidx;
    work->{{ c.name }}.x = {{ c.name }}_nzval;
    work->{{ c.name }}.m = {{ c.size[0] }};
    work->{{ c.name }}.n = {{ c.size[1] }};
    work->{{ c.name }}.nnz = {{ c.sparsity.nnz }};

    {% endfor %}

}



void fill_matrices(Params *params, Work *work){

  /* Evaluate linear operator coefficients. */
  {% for coeff in linop_coeffs %}
  {{ lo.eval(coeff) -}}

  {% endfor %}
  {% for expr in linop_exprs %}
  {{ atoms.eval(expr) -}}

  {% endfor %}

  /* Equality Constraints. */
  {% for c in eq_constr %}
  {% for coeff in c.linop.coeffs.values() %}
  add_matrix({{ var_offsets[coeff.vid] }}, {{ c.vert_offset }},
                &work->eq_coeff, &work->{{ coeff.storage.name }});

  {% endfor %}
  {% if c.linop.has_offset %}
  csr_vectorize(&work->{{ c.linop.offset_expr.storage.name }},
                work->eq_offset, {{ c.vert_offset}});
  {% endif %}
  {% endfor %}
  reset_colptr({{  eq_coeff.nnz }},  eq_colptr);

  /* Fill inequality constraint matrix. */
  {% for c in leq_constr %}
  {% for coeff in c.linop.coeffs.values() %}
  add_matrix({{ var_offsets[coeff.vid] }}, {{ c.vert_offset }},
             &work->leq_coeff, &work->{{ coeff.storage.name }});

  {% endfor %}
  {% if c.linop.has_offset %}
  csr_vectorize(&work->{{ c.linop.offset_expr.storage.name }},
                work->leq_offset, {{ c.vert_offset}});
  {% endif %}
  {% endfor %}
  reset_colptr({{ leq_coeff.nnz }}, leq_colptr);

  /* Objective. */
  {% for coeff in objective.coeffs.values() %}
  add_matrix({{ var_offsets[coeff.vid] }}, 0,
             &work->obj_coeff, &work->{{ coeff.storage.name }});
  {% if objective.has_offset %}
  work->obj_offset = work->{{ objective.offset_expr.storage.name }}.x[0];
  {% endif %}
  {% endfor %}
  reset_colptr({{ obj_coeff.nnz }}, obj_colptr);
  cscrow2vec(work->obj_coeff, work->obj_vec);

}


void csr_vectorize(CsrMatrix *A, double *x, long offset){
    long i, j, p, p2, n_vec=A->m*A->n, m=A->m;
    for(i=0; i<n_vec; i++) x[i] = 0;
    for(i=0; i<m; i++){
        p2 = A->p[i+1];
        for(p=A->p[i]; p<p2; p++){
            j = A->j[p];
            x[i+j*m] = A->x[p];
        }
    }
}




/* Converts a row vector, in CSC sparse matrix
 * format, into a dense vector.
 */
void cscrow2vec(CscMatrix A, double *vec){
  long i, count=0, n=A.n;
  for (i=0; i<n; i++){
    vec[i] = A.p[i] < A.p[i+1] ? A.x[count++] : 0;
  }
}


/* Converts a column vector, in Linop Coeff format,
 * into a dense vector.
 */
void coeff2vec(LinopCoeff A, double *vec, long offset){
  long i, count=0, m=A.m;
  for (i=0; i<m; i++){
    vec[offset+i] = A.p[i] < A.p[i+1] ? A.x[count++] : 0;
  }
}



// TODO delete?
// void get_rowvec(double *vec, long len, long *Ap, long *Aj, double *Ax){
//   int i, nnz = Ap[1];
//   for (i=0; i<len; i++)  vec[i] = 0;
//   for (i=0; i<nnz; i++)  vec[Aj[i]] = Ax[i];
// }



void add_matrix(long hshift, long vshift,
                CscMatrix *A, LinopCoeff *B){
  long i, j, p, p2, pA, m=B->m;
  for (i=0; i<m; i++){
    p2 = B->p[i+1];
    for (p=B->p[i]; p<p2; p++){
      j = B->j[p];
      pA = A->p[j+hshift]++; // TODO clean up
      // A->i[pA] = i+vshift; // TODO remove?
      A->x[pA] = B->x[p];
    }
  }
}



void reset_colptr(long m, long *Ap){
  int i;
  for (i=m; i>0; i--){
    Ap[i] = Ap[i-1];
  }
  Ap[0] = 0; 
}



void init_var_coeff(long m_var, long n_var, LinopCoeff *A){
    long m = m_var*n_var;
    A->m_var = m_var;
    A->n_var = n_var;
    A->m = m;
    A->n = m;
    A->nnz = m;
    long i;
    A->p[0] = 0;
    for(i=0; i<m; i++){
        A->p[i+1] = A->p[i]+1;
        A->j[i] = i;
        A->x[i] = 1.0;
    }
}



/* These are the linop definitions. */
{% for linop_name in unique_linops %}
  {{- lo.define(linop_name) }}
{% endfor %}



/* Vectorize a constant to be in Linop Coefficient format. */
void mat2coeff(CsrMatrix *A, LinopCoeff *C){
    CsrMatrix B;
    B.p = C->p;
    B.j = C->j;
    B.x = C->x;
    long m_new = A->m * A->n;
    reshape(A->m, m_new, A->p, A->j, A->x, B.p, B.j, B.x);
    C->m = m_new;
    C->n = 1;
    C->m_var = A->m;
    C->n_var = A->n;
    C->nnz = A->nnz;
}




void reshape(long m, long m_new,
             long *Ap, long *Aj, double *Ax,
             long *Zp, long *Zj, double *Zx){
  long i, j, i_new, j_new, idx, p, p2;

  for (i=0; i<=m_new; i++)  Zp[i] = 0;

  for (i=0; i<m; i++){
    p2 = Ap[i+1];
    for (p=Ap[i]; p<p2; p++){
      j = Aj[p];
      idx = j*m + i;
      i_new = idx % m_new;
      Zp[i_new+1]++;
    }
  }

  for (i=0; i<m_new; i++)  Zp[i+1] += Zp[i];

  for (i=0; i<m; i++){
    p2 = Ap[i+1];
    for (p=Ap[i]; p<p2; p++){
      j = Aj[p];
      idx = j*m + i;
      i_new = idx % m_new;
      idx -= i_new;
      j_new = idx/m_new;
      Zj[Zp[i_new]] = j_new;
      Zx[Zp[i_new]] = Ax[p];
      Zp[i_new]++;
    }
  }

  for (i=m_new; i>0; i--)  Zp[i] = Zp[i-1];
  Zp[0] = 0l;
}




{{ u.copy_linop_define() }}

{# {{ u.copy_define() }} // TODO add logic to python for this #}
