{% macro rowptr(expr) %}
{{- get_namespace(expr.storage) -}}{{ expr.storage.name }}_rowptr
{%- endmacro %}


{% macro colidx(expr) %}
{{- get_namespace(expr.storage) -}}{{ expr.storage.name }}_colidx
{%- endmacro %}


{% macro nzval(expr) %}
{{- get_namespace(expr.storage) -}}{{ expr.storage.name }}_nzval
{%- endmacro %}


{%- macro get_namespace(expr) -%}
{%- if   expr.type == 'const' -%}
{%- elif expr.type == 'var' -%}
     vars->
{%- else -%}
     work->
{%- endif -%}
{%- endmacro -%}



{% macro getsize(expr) -%}
  [{{- expr.size[0] }}][{{ expr.size[1] -}}]
{%- endmacro %}



{% macro copy_declare() %}
void copy(CsrMatrix A, CsrMatrix Z);
{% endmacro %}


{% macro copy_define() %}
void copy(CsrMatrix A, CsrMatrix Z){
  long i, p, p2, m=A.m;
  for(i=0; i<m; i++){
    Z.p[i] = A.p[i];
    p2 = A.p[i+1];
    for(p=A.p[i]; p<p2; p++){
      Z.j[p] = A.j[p];
      Z.x[p] = A.x[p];
    }
  }
  Z.p[m] = A.p[m];
}
{% endmacro %}


{% macro copy_eval(expr) %}
copy(work->{{ expr.args[expr.copy_arg].name }}, work->{{ expr.name }});
{% endmacro %}




{# gets a pointer to a pointer to the doubles #}
{% macro ptr( expr ) %}
{% if expr.size[0]==1 and expr.size[1]==1 %}
&&
{% elif expr.size[0]==1 or expr.size[1]==1 %}
&
{% endif %}
{% endmacro %}



{% macro print_vec(vec) %}
[{{ len(vec) }}] = {
{%- for x in vec[:-1] -%}
 {{- x -}}, 
{%- endfor -%}
{{- vec[-1] }}}
{%- endmacro -%}
