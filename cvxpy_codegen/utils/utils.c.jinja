{% macro rowptr(expr) %}
{{- get_namespace(expr.storage) -}}{{ expr.storage.name }}_rowptr
{%- endmacro %}


{% macro colidx(expr) %}
{{- get_namespace(expr.storage) -}}{{ expr.storage.name }}_colidx
{%- endmacro %}


{% macro nzval(expr) %}
{{- get_namespace(expr.storage) -}}{{ expr.storage.name }}_nzval
{%- endmacro %}


{%- macro get_namespace(expr) -%}
{%- if   expr.type == 'const' -%}
{%- elif expr.type == 'var' -%}
     vars->
{%- else -%}
     work->
{%- endif -%}
{%- endmacro -%}



{% macro getsize(expr) -%}
  [{{- expr.size[0] }}][{{ expr.size[1] -}}]
{%- endmacro %}



{% macro copy_declare() %}
void copy(CsrMatrix A, CsrMatrix Z);
{% endmacro %}


{% macro copy_define() %}
void copy(CsrMatrix A, CsrMatrix Z){
  long i, p, p2, m=A.m;
  for(i=0; i<m; i++){
    Z.p[i] = A.p[i];
    p2 = A.p[i+1];
    for(p=A.p[i]; p<p2; p++){
      Z.j[p] = A.j[p];
      Z.x[p] = A.x[p];
    }
  }
  Z.p[m] = A.p[m];
}
{% endmacro %}


{% macro copy_eval(expr) %}
copy(work->{{ expr.args[expr.copy_arg].name }}, work->{{ expr.name }});
{% endmacro %}




{% macro copy_linop_declare() %}
void copy_linop(LinopCoeff *A, LinopCoeff *Z);
{% endmacro %}


{% macro copy_linop_define() %}
void copy_linop(LinopCoeff *A, LinopCoeff *Z){
  long i, p, p2, m=A->m;
  for(i=0; i<m; i++){
    Z->p[i] = A->p[i];
    p2 = A->p[i+1];
    for(p=A->p[i]; p<p2; p++){
      Z->j[p] = A->j[p];
      Z->x[p] = A->x[p];
    }
  }
  Z->p[m] = A->p[m];
  Z->m = A->m;
  Z->n = A->n;
  Z->m_var = A->m_var;
  Z->n_var = A->n_var;
  Z->nnz = A->nnz;
}
{% endmacro %}


{% macro copy_linop_eval(expr) %}
copy_linop(&work->{{ expr.args[expr.copy_arg].name }}, &work->{{ expr.name }});
{% endmacro %}




{# gets a pointer to a pointer to the doubles #}
{% macro ptr( expr ) %}
{% if expr.size[0]==1 and expr.size[1]==1 %}
&&
{% elif expr.size[0]==1 or expr.size[1]==1 %}
&
{% endif %}
{% endmacro %}



{% macro print_vec(vec) %}
[{{ len(vec) }}] = {
{%- for x in vec[:-1] -%}
 {{- x -}}, 
{%- endfor -%}
{{- vec[-1] }}}
{%- endmacro -%}



{% macro print_linopcoeff_declare() %}
void print_linopcoeff(LinopCoeff *A);
{% endmacro %}

{% macro print_linopcoeff_eval(expr) %}
printf("LINOPCOEFF {{expr.storage.name}}\n");
printf("  type: {{expr.macro_name}}\n");
print_linopcoeff(&work->{{expr.storage.name}});
{% endmacro %}

{% macro print_linopcoeff_define() %}
void print_linopcoeff(LinopCoeff *A){
  long i, p, m=A->m;
  printf("  m = %ld\n", m);
  printf("  n = %ld\n", A->n);
  printf("  m_var = %ld\n", A->m_var);
  printf("  n_var = %ld\n", A->n_var);
  printf("  nnz = %ld\n", A->p[m]);
  printf("  Ap: \n");
  for(i=0; i<m; i++){
    printf("  Ap[%ld] = %ld\n", i, A->p[i]);
    for(p=A->p[i]; p<A->p[i+1]; p++){
      printf("    p, (i, j), x = %ld, (%ld, %ld), %f\n", p, i, A->j[p], A->x[p]);
    }
  }
  printf("  Ap[%ld] = %ld\n", m, A->p[m]);
  printf("\n\n");
}
{% endmacro %}



{% macro print_csrmat_declare() %}
void print_csrmat(CsrMatrix *A);
{% endmacro %}

{% macro print_csrmat_eval(expr) %}
printf("CSR MATRIX {{expr.storage.name}}\n");
printf("  type: {{expr.macro_name}}\n");
print_csrmat(&work->{{expr.storage.name}});
{% endmacro %}

{% macro print_csrmat_define() %}
void print_csrmat(CsrMatrix *A){
  long i, p, m=A->m;
  printf("  m = %ld\n", m);
  printf("  n = %ld\n", A->n);
  printf("  nnz = %ld\n", A->p[m]);
  printf("  Ap: \n");
  for(i=0; i<m; i++){
    printf("  Ap[%ld] = %ld\n", i, A->p[i]);
    for(p=A->p[i]; p<A->p[i+1]; p++){
      printf("    p, (i, j), x = %ld, (%ld, %ld), %f\n", p, i, A->j[p], A->x[p]);
    }
  }
  printf("  Ap[%ld] = %ld\n", m, A->p[m]);
  printf("\n\n");
}
{% endmacro %}




{% macro print_cscmat_declare() %}
void print_cscmat(CscMatrix *A);
{% endmacro %}

{% macro print_cscmat_eval(name) %}
printf("CSC MATRIX {{name}}\n");
print_cscmat(&work->{{name}});
{% endmacro %}

{% macro print_cscmat_define() %}
void print_cscmat(CscMatrix *A){
  long j, p, n=A->n;
  printf("  m = %ld\n", A->m);
  printf("  n = %ld\n", n);
  printf("  nnz = %ld\n", A->p[n]);
  printf("  Ap: \n");
  for(j=0; j<n; j++){
    printf("  Ap[%ld] = %ld\n", j, A->p[j]);
    for(p=A->p[j]; p<A->p[j+1]; p++){
      printf("    p, (i, j), x = %ld, (%ld, %ld), %f\n", p, A->i[p], j, A->x[p]);
    }
  }
  printf("  Ap[%ld] = %ld\n", n, A->p[n]);
  printf("\n\n");
}
{% endmacro %}



{% macro print_vec_declare() %}
void print_vec(double *x, long n);
{% endmacro %}

{% macro print_vec_eval(name, length) %}
printf("DENSE VECTOR {{name}}\n");
print_vec(work->{{name}}, {{length}}l);
{% endmacro %}

{% macro print_vec_define() %}
void print_vec(double *x, long n){
  long i;
  printf("  n = %ld\n", n);
  for(i=0; i<n; i++){
    printf("  x[%ld] = %f\n", i, x[i]);
  }
  printf("\n\n");
}
{% endmacro %}
