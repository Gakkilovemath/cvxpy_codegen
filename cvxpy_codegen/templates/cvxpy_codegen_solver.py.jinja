import _cvxpy_codegen_solver as _intf
import numpy

def cg_solve({%- for p in named_params -%}
              {{ p.name }},
              {%- endfor %}):

    {% for p in named_params %}
    {% if p.is_scalar() %}
    if not (isinstance({{p.name}}, float) or isinstance({{p.name}}, int)):
        raise TypeError("Parameter {{p.name}} should be an int or float, "
                        "but instead has type %s" % type({{p.name}}))
    {{p.name}} = float({{p.name}})

    {% elif p.is_vector() %}
    if {{p.name}}.shape != ({{p.shape[0]}},):
        raise TypeError("Parameter {{p.name}} should have shape ({{p.shape[0]}},), "
                        "but has shape %s" % str({{p.name}}.shape))

    {% else %}
    if {{p.name}}.shape != {{p.shape}}:
        raise TypeError("Parameter {{p.name}} should have shape {{p.shape}}, "
                        "but has shape %s" % str({{p.name}}.shape))

    {% endif %}

    {{ p.name }} = numpy.asmatrix({{ p.name }})
    {% if p.is_vector() %}
    {{ p.name }} = {{ p.name }}.T
    {% endif %}

    {{ p.name }} = numpy.ascontiguousarray({{ p.name }}, dtype=float)
    {% endfor %}

    vars_dict, stats_dict = _intf.solve({% for p in named_params -%}
                                        {{ p.name }},
                                        {%- endfor %})

    s = stats_dict['status']
    if s == 0:
        s = 'optimal'
    if s == 1:
        s = 'infeasible'
    if s == 2:
        s = 'unbounded'
    if s == 3:
        s = 'solver error'
    stats_dict['status'] = s

    return vars_dict, stats_dict
